package ru.neostudio.telegramcontrol;

import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class ControlBot extends TelegramLongPollingBot {

    private final TelegramControl plugin;
    private Long currentChatId;
    private boolean awaitingLogin = false;
    private boolean awaitingPassword = false;
    private boolean awaitingCommand = false;
    private String tempLogin;

    public ControlBot(TelegramControl plugin) {
        this.plugin = plugin;
    }

    @Override
    public String getBotUsername() {
        return plugin.getBotUsername();
    }

    @Override
    public String getBotToken() {
        return plugin.getBotToken();
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            currentChatId = update.getMessage().getChatId();
            String messageText = update.getMessage().getText().trim();

            if (plugin.isAuthenticated(currentChatId)) {
                handleAuthenticatedMessage(messageText);
            } else {
                handleUnauthenticatedMessage(messageText);
            }
        }
    }

    private void handleAuthenticatedMessage(String message) {
        String timestamp = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());

        if (awaitingCommand) {
            awaitingCommand = false;
            if (message.startsWith("/")) {
                String fullCommand = message.substring(1);
                String cmdName = fullCommand.split(" ")[0].toLowerCase();
                if (plugin.isCommandForbidden(cmdName)) {
                    sendMessage("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞.", true);
                    plugin.getLogger().info(String.format("[TelegramControl] User with Chat ID %d attempted forbidden command: %s at %s",
                            currentChatId, fullCommand, timestamp));
                    return;
                }
                String output = plugin.executeCommandWithOutput(fullCommand);
                sendMessage("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: " + message + "\n–í—ã–≤–æ–¥ –∫–æ–Ω—Å–æ–ª–∏:\n" + output, true);
                plugin.getLogger().info(String.format("[TelegramControl] User with Chat ID %d executed command: %s at %s, output: %s",
                        currentChatId, fullCommand, timestamp, output));
            } else {
                sendMessage("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å /.", true);
            }
            return;
        }

        switch (message) {
            case "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞":
                String status = plugin.getServerStatus();
                sendMessage(status, true);
                plugin.getLogger().info(String.format("[TelegramControl] User with Chat ID %d requested server status at %s",
                        currentChatId, timestamp));
                break;
            case "–ö–æ–Ω—Å–æ–ª—å":
                String logs = plugin.getRecentLogs();
                sendMessage("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –∫–æ–Ω—Å–æ–ª–∏:\n" + logs, true);
                plugin.getLogger().info(String.format("[TelegramControl] User with Chat ID %d requested console logs at %s",
                        currentChatId, timestamp));
                break;
            case "–ö–æ–º–∞–Ω–¥–∞":
                awaitingCommand = true;
                sendMessage("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É (–Ω–∞—á–∏–Ω–∞–π—Ç–µ —Å /):", true);
                break;
            case "–í—ã–π—Ç–∏":
                plugin.logout(currentChatId);
                sendMessage("‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞: /login");
                plugin.getLogger().info(String.format("[TelegramControl] User with Chat ID %d logged out at %s",
                        currentChatId, timestamp));
                break;
            default:
                if (message.startsWith("/")) {
                    String fullCommand = message.substring(1);
                    String cmdName = fullCommand.split(" ")[0].toLowerCase();
                    if (plugin.isCommandForbidden(cmdName)) {
                        sendMessage("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞.", true);
                        plugin.getLogger().info(String.format("[TelegramControl] User with Chat ID %d attempted forbidden command: %s at %s",
                                currentChatId, fullCommand, timestamp));
                        return;
                    }
                    String output = plugin.executeCommandWithOutput(fullCommand);
                    sendMessage("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: " + message + "\n–í—ã–≤–æ–¥ –∫–æ–Ω—Å–æ–ª–∏:\n" + output, true);
                    plugin.getLogger().info(String.format("[TelegramControl] User with Chat ID %d executed command: %s at %s, output: %s",
                            currentChatId, fullCommand, timestamp, output));
                } else {
                    sendMessage("‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –Ω–∞—á–∏–Ω–∞—è —Å /.", true);
                }
                break;
        }
    }

    private void handleUnauthenticatedMessage(String message) {
        String timestamp = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());

        if (awaitingLogin) {
            tempLogin = message;
            awaitingLogin = false;
            awaitingPassword = true;
            sendMessage("üê±‚Äçüë§ –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:");
            return;
        }

        if (awaitingPassword) {
            String password = message;
            awaitingPassword = false;
            if (plugin.authenticate(currentChatId, tempLogin, password)) {
                sendMessage("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", true);
                plugin.getLogger().info(String.format("[TelegramControl] User with Chat ID %d logged in with login %s at %s (IP: Unknown)",
                        currentChatId, tempLogin, timestamp));
            } else {
                sendMessage("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /login");
                plugin.getLogger().info(String.format("[TelegramControl] Failed login attempt for Chat ID %d with login %s at %s",
                        currentChatId, tempLogin, timestamp));
            }
            return;
        }

        if (message.equalsIgnoreCase("/login")) {
            awaitingLogin = true;
            sendMessage("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:");
        } else {
            sendMessage("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å üëâ /login");
        }
    }

    private void sendMessage(String text) {
        sendMessage(text, false);
    }

    private void sendMessage(String text, boolean withKeyboard) {
        SendMessage message = new SendMessage();
        message.setChatId(currentChatId.toString());
        message.setText(text);
        if (withKeyboard) {
            message.setReplyMarkup(createKeyboard());
        }
        try {
            execute(message);
        } catch (TelegramApiException e) {
            plugin.getLogger().severe("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: " + e.getMessage());
        }
    }

    private ReplyKeyboardMarkup createKeyboard() {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setSelective(true);
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);

        List<KeyboardRow> keyboard = new ArrayList<>();
        KeyboardRow row1 = new KeyboardRow();
        row1.add("–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞");
        row1.add("–ö–æ–Ω—Å–æ–ª—å");
        keyboard.add(row1);

        KeyboardRow row2 = new KeyboardRow();
        row2.add("–ö–æ–º–∞–Ω–¥–∞");
        row2.add("–í—ã–π—Ç–∏");
        keyboard.add(row2);

        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }
}